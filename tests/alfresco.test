<?php
// $Id$

/**
 * @file
 * Test Alfresco functionality.
 */

class AlfrescoTestCase extends DrupalWebTestCase {
  protected $privileged_user;

  public function setUp() {
    parent::setUp('alfresco');

    // Using Alfresco Content Community repository for run tests
    variable_set('alfresco_repository_url', 'http://share.alfresco.com/alfresco/api');
    // Using Joomla - Alfresco demo account (WTF!)
    variable_set('alfresco_credentials_username', 'joomla_demo');
    variable_set('alfresco_credentials_password', base64_encode('joomla_demo'));
    // Avoid test HTTP connection with repository
    variable_set('alfresco_http_request_fails', FALSE);

    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array('create alfresco content', 'edit own alfresco content', 'administer site configuration'));
    $this->drupalLogin($this->privileged_user);
  }
}

class AlfrescoStatusTestCase extends AlfrescoTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Alfresco status',
      'description' => 'Try connection with Alfresco repository.',
      'group' => 'Alfresco',
    );
  }

  public function testStatusReport() {
    $this->drupalGet('admin/reports/status');
    $this->assertText(t('Connection attempt successful'));
  }
}

class AlfrescoCrudTestCase extends AlfrescoTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Alfresco CRUD',
      'description' => 'Tests the CRUD (create, read, update, delete) operations for the Alfresco item content type.',
      'group' => 'Alfresco',
    );
  }

  // Create a simpletest_example node using the node form
  public function testCreateAlfrescoItem() {
    // Create node to edit.
    $edit = array();
    //$edit['title'] = $this->randomName(8);
    //$edit['body'] = $this->randomName(16);
    $edit['reference'] = 'workspace://SpacesStore/8f64d1ed-1b31-4d14-a130-5feb471f92e8';
    $this->drupalPost('node/add/alfresco-item', $edit, t('Save'));
    $this->assertText(t('Alfresco item @title has been created.', array('@title' => 'MavenQuickReferenceCard.pdf')));
  }

  // Create a simpletest_example node and then see if our user can edit it
  public function testUpdateAlfrescoItem() {
    $settings = array(
      'type' => 'alfresco_item',
      'title' => '',
      'body' => '',
      'reference' => 'workspace://SpacesStore/8f64d1ed-1b31-4d14-a130-5feb471f92e8',
    );
    $node = $this->drupalCreateNode($settings);

    // For debugging, we might output the node structure with $this->verbose()
    // It would only be output if the testing settings had 'verbose' set.
    $this->verbose('Node created: ' . var_export($node, TRUE));

    $this->drupalGet("node/{$node->nid}/edit");

    // Looking for a DOM node by ID to see if we were successful.
    $this->assertFieldById('edit-title', $node->title, 'Found edit-title field as indication that we got to the edit page');
  }
}
