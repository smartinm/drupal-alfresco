<?php
// $Id$

/**
 * @file
 *
 */

/**
 * Implementation of hook_help().
 */
function alfresco_attach_help($path, $arg) {

  switch ($path) {
    case 'admin/help#alfresco_attach':
      return '<p>'. t('Allows users to upload and attach Alfresco files to content.') .'</p>';
  }
}

/**
 * Implementation of hook_theme()
 */
function alfresco_attach_theme() {
  return array(
  /*
    'alfresco_attach_attachments' => array(
      'arguments' => array('files' => NULL),
    ),
    */
    'alfresco_attach_form_current' => array(
      'arguments' => array('form' => NULL),
    ),
    'alfresco_attach_form_new' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Theme the attachments list.
 *
 * @ingroup themeable
 */
function theme_alfresco_attach_form_current(&$form) {

  $header = array('', t('Delete'), t('List'), t('Description'), t('Weight'), t('Size'));
  drupal_add_tabledrag('alfresco-attachments', 'order', 'sibling', 'alfresco-weight');

  foreach (element_children($form) as $key) {
    // Add class to group weight fields for drag and drop.
    $form[$key]['weight']['#attributes']['class'] = 'alfresco-weight';

    $row = array('');
    $row[] = drupal_render($form[$key]['remove']);
    $row[] = drupal_render($form[$key]['list']);
    $row[] = drupal_render($form[$key]['description']);
    $row[] = drupal_render($form[$key]['weight']);
    $row[] = drupal_render($form[$key]['size']);
    $rows[] = array('data' => $row, 'class' => 'draggable');
  }
  $output = theme('table', $header, $rows, array('id' => 'alfresco-attachments'));
  $output .= drupal_render($form);
  return $output;
}

/**
 * Theme the attachment form.
 * Note: required to output prefix/suffix.
 *
 * @ingroup themeable
 */
function theme_alfresco_attach_form_new($form) {
  drupal_add_tabledrag('alfresco-attachments', 'order', 'sibling', 'alfresco-weight');
  $output = drupal_render($form);
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function alfresco_attach_perm() {
  return array(
    'view attached alfresco items'
  );
}

/**
 * Implementation of hook_menu().
 */
function alfresco_attach_menu2() {
  $items['alfresco-attach/js'] = array(
    'page callback' => 'alfresco_attach_js',
    //'access arguments' => array('upload files'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 *
 */
function alfresco_attach_form_alter(&$form, $form_state, $form_id) {

  // Node edit form.
  if (isset($form['type']) && isset($form['#node'])) {
    $node = $form['#node'];

    // @todo AÃ±adir tipos de nodos configurables
    if ($form['type']['#value'] .'_node_form' == $form_id && $node->type != 'alfresco_item') {

      // Attachments fieldset
      $form['alfresco_attachments'] = array(
        '#type'        => 'fieldset',
        // @todo permisos para ver nodos de alfresco
        //'#access'      => user_access('create alfresco content'),
        '#title'       => t('Alfresco attachments'),
        '#collapsible' => TRUE,
        '#collapsed'   => empty($node->alfresco),
        '#description' => t(''),
        '#prefix'      => '<div class="alfresco-attachments">',
        '#suffix'      => '</div>',
        '#weight'      => 20,
      );

      // Wrapper for fieldset contents (used by ahah.js).
      $form['alfresco_attachments']['wrapper'] = array(
        '#prefix' => '<div id="alfresco-attachments-wrapper">',
        '#suffix' => '</div>',
      );

      // @todo tabla de adjuntos actuales
      $form['alfresco_attachments']['wrapper'] += _alfresco_attach_form($node);

      // Form element for new alfresco attach
      $form['alfresco_attachments']['wrapper']['new'] = array();
      $form['alfresco_attachments']['wrapper']['new']['#weight'] = 10;

      if (variable_get('alfresco_attach_existing', TRUE)) {
        $form['alfresco_attachments']['wrapper']['new']['aid'] = array(
          '#type'          => 'select',
          '#title'         => t('Attach existing alfresco item'),
          '#options'       => _alfresco_attach_get_alfresco_nodes(),
          '#default_value' => empty($node->aid) ? NULL : $node->aid,
          '#description'   => t('Choose an alfresco item already existing on the server if you do not create a new one.')
        );
        $form['alfresco_attachments']['wrapper']['new'][] = array(
          '#type'       => 'item',
          '#value'      => t('-or-'),
          '#attributes' => array('class' => 'either-choice')
        );
      }

      if (user_access('create alfresco content')) {
        $form['alfresco_attachments']['wrapper']['new']['reference'] = array(
          '#type'          => 'textfield',
          '#title'         => t('Attach new alfresco item'),
          '#default_value' => empty($node->reference) ? NULL : $node->reference,
          '#description'   => t('Alfresco Node Reference. Example: workspace://SpacesStore/uuid'),
        );
      }

      // Custom validate and submit handler so we can handle alfresco item creation on-the-fly
      $form['#validate'][] = 'alfresco_attach_form_validate';
      $form['#submit'][]   = 'alfresco_attach_form_submit';
    }
  }
}

/**
 *
 */
function alfresco_attach_form_validate(&$form, &$form_state) {
  dpm("alfresco_attach_form_validate");

  // Save new alfresco items.
  if (user_access('create alfresco content')) {

    if (!empty($form_state['values']['aid'])) {
      // Attach existing alfresco item
      if ($alf_node = node_load($form_state['values']['aid'])) {
        $form_state['alfresco_node'] = $alf_node;
      }
      else {
        form_set_error('aid', t("Error loading alfresco node."));
      }
    }
    elseif (!empty($form_state['values']['reference'])) {
      // Attach new alfresco item
      if ($alf_node = alfresco_create_node($form_state['values']['reference'])) {
        $form_state['alfresco_node'] = $alf_node;
      }
    }
  }
}

/**
 *
 */
function alfresco_attach_form_submit(&$form, &$form_state) {
  dpm("alfresco_attach_form_submit");

  // Save new file uploads.
  if (user_access('create alfresco content') && !empty($form_state['alfresco_node'])) {

    $alf_node = $form_state['alfresco_node'];

    $attach = new stdClass();
    $attach->aid = $alf_node->nid;
    $attach->description = !empty($alf_node->cm_name) ? $alf_node->cm_name : $alf_node->cm_title;
    $attach->list = TRUE;
    $attach->weight = 0;
    $attach->new = TRUE;

    $form['#node']->alfresco[$attach->aid] = $attach;
    $form_state['values']['alfresco'][$attach->aid] = (array)$attach;

    unset($form_state['alfresco_node']);
  }

  if (isset($form_state['values']['alfresco'])) {
    foreach ($form_state['values']['alfresco'] as $key => $attach) {
      $form_state['values']['alfresco'][$key]['new'] = !empty($form['#node']->alfresco[$key]->new);
    }
  }

  // Order the form according to the set file weight values.
  if (!empty($form_state['values']['alfresco'])) {
    $microweight = 0.001;
    foreach ($form_state['values']['alfresco'] as $key => $attach) {
      if (is_numeric($key)) {
        $form_state['values']['alfresco'][$key]['#weight'] = $attach['weight'] + $microweight;
        $microweight += 0.001;
      }
    }
    uasort($form_state['values']['alfresco'], 'element_sort');
  }
}

/**
 * Fetch an array of all candidate referenced nodes, for use in presenting the selection form to the user.
 */
function _alfresco_attach_get_alfresco_nodes() {

  $result = db_query(db_rewrite_sql("SELECT n.nid, n.title FROM {node} n WHERE n.status=1 AND type='alfresco_item' ORDER BY n.sticky DESC, n.title ASC"));
  $result_count = db_result(db_query("SELECT COUNT(*) FROM {node} n WHERE n.status=1 AND type='alfresco_item'"));
  $rows = array(0 => t('None'));
  while ($node = db_fetch_object($result)) {
    $rows[$node->nid] = $node->title;
  }
  return $rows;
}

/**
 * Implementation of hook_nodeapi().
 */
function alfresco_attach_nodeapi(&$node, $op, $teaser) {

  switch ($op) {
    case 'load':
      $info['alfresco'] = alfresco_attach_load($node);
      if (count($info['alfresco'])) {
        return $info;
      }
      break;

    case 'view':
      break;

    case 'insert':
    case 'update':
      if (user_access('create alfresco content')) {
        alfresco_attach_save($node);
      }
      break;

    case 'delete':
      break;

    case 'delete revision':
      break;

    case 'search result':
      break;

    case 'rss item':
      break;
  }
}

function _alfresco_attach_form($node) {
  global $user;

  $form = array(
    '#theme' => 'alfresco_attach_form_new',
    '#cache' => TRUE,
  );

  if (!empty($node->alfresco) && is_array($node->alfresco)) {
    $form['alfresco']['#theme'] = 'alfresco_attach_form_current';
    $form['alfresco']['#tree']  = TRUE;

    foreach ($node->alfresco as $key => $attach) {
      $attach = (object)$attach;
      $alfresco_node = $attach->item;

      $url = url('node/'. $attach->aid, array('absolute' => TRUE));
      $description = '<small>'. l($url, 'node/'. $attach->aid, array('attributes' => array('title' => t('View alfresco node')))) .'</small>';

      $form['alfresco'][$key]['description'] = array(
        '#type'          => 'textfield',
        '#default_value' => !empty($attach->description) ? $attach->description : NULL,
        '#maxlength'     => 256,
        '#description'   => $description,
      );
      $form['alfresco'][$key]['size'] = array(
        '#value' => isset($alfresco_node->cm_content) ? format_size($alfresco_node->cm_content['size']) : NULL
      );
      $form['alfresco'][$key]['remove'] = array(
        '#type'          => 'checkbox',
        '#default_value' => !empty($attach->remove),
      );
      $form['alfresco'][$key]['list'] = array(
        '#type'          => 'checkbox',
        '#default_value' => $attach->list,
      );
      $form['alfresco'][$key]['weight'] = array(
        '#type'          => 'weight',
        '#delta'         => count($node->alfresco),
        '#default_value' => $attach->weight,
      );
      $form['alfresco'][$key]['aid'] = array(
        '#type'  => 'value',
        '#value' => $attach->aid,
      );
      $form['alfresco'][$key]['new'] = array(
        '#type'  => 'value',
        '#value' => FALSE,
      );
    }
  }

  /*
  if (user_access('create alfresco content')) {
    $form['new']['#weight'] = 10;
    $form['new']['reference'] = array(
      '#type'        => 'textfield',
      '#title'       => t('Attach new Alfresco item'),
      '#description' => t('Alfresco Node Reference. Example: workspace://SpacesStore/uuid'),
    );
    $form['new']['attach_button'] = array(
      '#type'  => 'submit',
      '#value' => t('Attach'),
      '#name'  => 'attach',
      '#ahah'  => array(
        'path'     => 'alfresco-attach/js',
        'wrapper'  => 'alfresco-attach-wrapper',
        'progress' => array('type' => 'bar', 'message' => t('Please wait...')),
      ),
      '#submit' => array('node_form_submit_build_node'),
    );
  }
  */

  return $form;
}

/**
 * Menu-callback for JavaScript-based uploads.
 */
function alfresco_attach_js() {
  dpm('alfresco_attach_js');
  exit;
}

/**
 *
 */
function alfresco_attach_load($node) {
  $alfresco = array();

  if ($node->vid) {
    $result = db_query('SELECT * FROM {alfresco_attach} WHERE vid = %d ORDER BY weight, aid', $node->vid);
    while ($attach = db_fetch_object($result)) {
      $alfresco[$attach->aid] = $attach;
      $alfresco[$attach->aid]->item = node_load($attach->aid);
    }
  }

  return $alfresco;
}

/**
 *
 */
function alfresco_attach_save(&$node) {

  if (empty($node->alfresco) || !is_array($node->alfresco)) {
    return;
  }

  foreach ($node->alfresco as $aid => $attach) {
    // Convert file to object for compatibility
    $attach = (object)$attach;

    // Remove file. Process removals first since no further processing
    // will be required.
    if (!empty($attach->remove)) {
      db_query('DELETE FROM {alfresco_attach} WHERE aid = %d AND vid = %d', $aid, $node->vid);

      // If the file isn't used by any other revisions delete it.
      // @todo Parametrizar este comportamiento con una opciÃ³n en administraciÃ³n
      /*
      $count = db_result(db_query('SELECT COUNT(aid) FROM {alfresco_attach} WHERE aid = %d', $aid));
      if ($count < 1) {
        node_delete($aid);
      }
      */

      // Disassociate before node submission.
      unset($node->alfresco[$aid]);

      // Move on, so the removed file won't be added to new revisions.
      continue;
    }

    // Create a new revision, or associate a new file needed.
    if (!empty($node->old_vid) || $attach->new) {
      db_query("INSERT INTO {alfresco_attach} (aid, nid, vid, list, description, weight) VALUES (%d, %d, %d, %d, '%s', %d)",
        $attach->aid, $node->nid, $node->vid, $attach->list, $attach->description, $attach->weight);
    }
    // Update existing revision.
    else {
      db_query("UPDATE {alfresco_attach} SET list = %d, description = '%s', weight = %d WHERE aid = %d AND vid = %d",
        $attach->list, $attach->description, $attach->weight, $attach->aid, $node->vid);
    }
  }
}
