<?php
// $Id$

/**
 * @file
 * Install and configure Alfresco module.
 */

/**
 * Implementation of hook_install().
 */
function alfresco_install() {
  drupal_install_schema('alfresco');

  $link = array('!link' => l(t('Administer > Site configuration > Alfresco'), 'admin/settings/alfresco'));
  drupal_set_message(t("Alfresco module settings are available under !link", $link));
}

/**
 * Implementation of hook_enable().
 */
function alfresco_enable() {
}

/**
 * Implementation of hook_disable().
 */
function alfresco_disable() {
}

/**
 * Implementation of hook_requirements().
 */
function alfresco_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase == 'runtime') {
    // Check Alfresco PHP Library
    $result = _alfresco_check_php_library();
    $requirements['alfresco_php_library'] = array(
      'title'       => $t('Alfresco PHP library'),
      'value'       => $result['value'],
      'severity'    => $result['severity'],
      'description' => isset($result['description']) ? $result['description'] : NULL,
    );

    // Check connection Alfresco Repository only if Alfresco PHP Library is installed
    if ($result['severity'] == REQUIREMENT_OK) {
      $result = _alfresco_check_connection_repository();
      $requirements['alfresco_repository'] = array(
        'title'    => $t('Alfresco repository'),
        'value'       => $result['value'],
        'severity'    => $result['severity'],
        'description' => isset($result['description']) ? $result['description'] : NULL,
      );
    }
  }
  elseif ($phase == 'install') {
    // Check Alfresco PHP Library
    $result = _alfresco_check_php_library();
    if ($result['severity'] == REQUIREMENT_ERROR) {
      $requirements['alfresco_php_library'] = array(
        'title'       => $t('Alfresco PHP library'),
        'severity'    => $result['severity'],
        'description' => $result['description'],
      );
    }
  }

  return $requirements;
}

/**
 * Implementation of hook_uninstall().
 */
function alfresco_uninstall() {

  // Eliminamos variables
  $variables = array(
    'alfresco_credentials_username',
    'alfresco_credentials_password',
    'alfresco_file_downloads',
    'alfresco_repository_url',
    'alfresco_sync_cron_limit',
    'alfresco_sync_cron_refresh',
    'alfresco_sync_enabled',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }

  // Eliminamos todo los nodos de tipo alfresco_item
  $result = db_query("SELECT nid FROM {node} WHERE type = 'alfresco_item'");
  while ($obj = db_fetch_object($result)) {
    node_delete($obj->nid);
  }

  // Remove the node type.
  node_type_delete('alfresco_item');

  drupal_uninstall_schema('alfresco');
}

/**
 * Implementation of hook_schema().
 */
function alfresco_schema() {

  $schema['alfresco_node'] = array(
    'fields' => array(

      /* Drupal node identifications */
      'vid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
      'nid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),

      /* The Alfresco node reference */
      'reference' => array(
        'type'     => 'varchar',
        'length'   => 255,
        'not null' => TRUE,
        'default'  => ''
      ),

      /* The most recent time the {alfresco_node} has been saved/synchronized */
      'timestamp' => array(
        'type'     => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default'  => 0
      ),

      /*********************************
       * Alfresco Content Domain Model *
       *********************************/

      // Filename (Object type)
      'cm_name' => array(
        'description' => 'cm:name property from cm:cmobject',
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
        'default'     => '',
      ),

      // Title (Titled aspect)
      'cm_title' => array(
        'description' => 'cm:title property from cm:titled',
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => FALSE,
        'default'     => '',
      ),
      // Description (Titled aspect)
      'cm_description' => array(
        'description' => 'cm:description property from cm:titled',
        'type'        => 'text',
        'not null'    => FALSE,
      ),

      // Author (Author aspect)
      'cm_author' => array(
        'description' => 'cm:author property from cm:author',
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => FALSE,
        'default'     => '',
      ),

      // Created (Auditable aspect)
      'cm_created' => array(
        'description' => 'cm:created property from cm:auditable',
        'type'        => 'datetime',
        'not null'    => TRUE,
      ),
      // Creator (Auditable aspect)
      'cm_creator' => array(
        'description' => 'cm:creator property from cm:auditable',
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
        'default'     => '',
      ),
      // Modified (Auditable aspect)
      'cm_modified' => array(
        'description' => 'cm:modified property from cm:auditable',
        'type'        => 'datetime',
        'not null'    => TRUE,
      ),
      // Modifier (Auditable aspect)
      'cm_modifier' => array(
        'description' => 'cm:modifier property from cm:auditable',
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
        'default'     => '',
      ),
    ),
    'primary key' => array('vid'),
  );

  // ContentData
  $schema['alfresco_content'] = array(
    'fields' => array(
      'vid' => array(
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'nid' => array(
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'url' => array(
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
        'default'     => '',
      ),
      'mimetype' => array(
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
        'default'     => '',
      ),
      'size' => array(
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'encoding' => array(
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
        'default'     => '',
      ),
    ),
    'primary key' => array('vid'),
  );

  return $schema;
}

function _alfresco_check_php_library() {
  $t = get_t();

  if (!class_exists('SoapClient')) {
    $arg = array('@url' => 'http://php.net/manual/en/book.soap.php');
    $msg = $t('Read <a href="@url">SOAP manual</a> to find how to install and enable SOAP in your PHP setup.', $arg);

    return array(
      'value'       => $t('The PHP SOAP extension is no available'),
      'description' => $msg,
      'severity'    => REQUIREMENT_ERROR,
    );
  }

  // Add the Alfresco PHP library directory to include path if exists
  $lib_path = drupal_get_path('module', 'alfresco') .'/lib';
  if (is_dir($lib_path)) {
    set_include_path(get_include_path() . PATH_SEPARATOR . $lib_path);
    @include_once "Alfresco/Service/Repository.php";

    if (class_exists('Repository')) {
      return array(
        'value'    => $t('Found (%path).', array('%path' => $lib_path)),
        'severity' => REQUIREMENT_OK,
      );
    }
  }
  else {
    @include_once "Alfresco/Service/Repository.php";

    if (class_exists('Repository')) {
      return array(
        'value'    => $t('Found (system\'s include_path)'),
        'severity' => REQUIREMENT_OK,
      );
    }
  }

  $arg = array(
    '@url'  => 'http://wiki.alfresco.com/wiki/Alfresco_PHP_Library_Installation_Instructions',
    '%path' => $lib_path
  );
  $msg = $t('Read <a href="@url">Alfresco PHP Library Installation Instructions</a> to find how to install and enable Alfresco PHP Library.<br />As an alternative, you can download and copy Alfresco PHP Library on %path', $arg);

  return array(
    'value'       => $t('No available'),
    'description' => $msg,
    'severity'    => REQUIREMENT_ERROR,
  );
}

function _alfresco_check_connection_repository() {
  $t = get_t();

  $repository_url = variable_get('alfresco_repository_url', 'http://localhost:8080/alfresco/api');

  // First check that Drupal can issue HTTP requests to repository.
  $result = drupal_http_request($repository_url);
  if (!isset($result->code) || ($result->code != 200)) {
    return array(
      'value'       => $t('HTTP request failed (error !code)', array('!code' => isset($result->code) ? $result->code : $t('None'))),
      'description' => $t('Error message: !error', array('!error' => htmlentities($result->error))),
      'severity'    => REQUIREMENT_ERROR,
    );
  }

  try {
    _alfresco_service_include_library();

    $username = variable_get('alfresco_credentials_username', 'guest');
    $password = base64_decode(variable_get('alfresco_credentials_password', base64_encode('guest')));

    $repository = new Repository($repository_url);
    $ticket  = $repository->authenticate($username, $password);
    $session = $repository->createSession($ticket);
    $store   = $session->getStore('system', 'system');
    $result  = $session->query($store, 'PATH:"/sys:descriptor-current"');

    if (is_array($result) && count($result)) {
      $descriptor = $result[0];

      if (!strstr($descriptor->sys_versionEdition, 'contentUrl')) {
        $version = 'Alfresco '. $descriptor->sys_versionEdition .' - ';
      }
      else {
        $version = 'Alfresco Enterprise - ';
      }
      $version .= sprintf('v%d.%d.%d', $descriptor->sys_versionMajor, $descriptor->sys_versionMinor, $descriptor->sys_versionRevision);

      if (!empty($descriptor->sys_versionLabel)) {
        $version .= sprintf(' (%s %d)', $descriptor->sys_versionLabel, $descriptor->sys_versionBuild);
      }
      else {
        $version .= sprintf(' (%d)', $descriptor->sys_versionBuild);
      }
      return array(
        'value'    => l($version, $repository_url),
        'severity' => REQUIREMENT_OK,
      );
    }
    else {
      return array(
        'value'    => $t('Connectivity OK (%ticket)', array('%ticket' => $ticket)),
        'severity' => REQUIREMENT_OK,
      );
    }
  }
  catch (SoapFault $sf) {
    $error = alfresco_parse_soap_fault($sf);
    return array(
      'value'       => $t('SOAP request failed'),
      'description' => $t('SOAP Fault Code: !code, Message: !message, Detail: !detail', array(
        '!code'    => !empty($error['code'])    ? $error['code']    : $t('None'),
        '!message' => !empty($error['message']) ? $error['message'] : $t('None'),
        '!detail'  => !empty($error['detail'])  ? $error['detail']  : $t('None'),
      )),
      'severity' => REQUIREMENT_ERROR,
    );
  }
}
