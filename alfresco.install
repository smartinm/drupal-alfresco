<?php
// $Id$

/**
 * @file
 * Install and configure Alfresco module.
 */

// Relative path to Alfresco PHP Library
define('ALFRESCO_PHP_LIBRARY_PATH_INSTALL', 'alfresco-php-library');

/**
 * Implementation of hook_install().
 */
function alfresco_install() {
  drupal_install_schema('alfresco');
}

/**
 * Implementation of hook_enable().
 */
function alfresco_enable() {
}

/**
 * Implementation of hook_disable().
 */
function alfresco_disable() {
}

/**
 * Implementation of hook_requirements().
 */
function alfresco_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase == 'runtime') {
    // Check Alfresco PHP Library
    $result = _alfresco_check_php_library();
    $requirements['alfresco_php_library'] = array(
      'title'       => $t('Alfresco PHP Library'),
      'value'       => $result['value'],
      'severity'    => $result['severity'],
      'description' => isset($result['description']) ? $result['description'] : NULL,
    );
    
    // Check connection Alfresco Repository
    $result = _alfresco_check_connection_repository();
    $requirements['alfresco_repository'] = array(
      'title'    => $t('Alfresco repository'),
      'value'       => $result['value'],
      'severity'    => $result['severity'],
      'description' => isset($result['description']) ? $result['description'] : NULL,
    );
  }
  elseif ($phase == 'install') {
    // Check Alfresco PHP Library
    $result = _alfresco_check_php_library();
    $requirements['alfresco_php_library'] = array(
      'title'       => $t('Alfresco PHP Library'),
      'severity'    => $result['severity'],
      'description' => isset($result['description']) ? $result['description'] : NULL,
    );
  }

  return $requirements;
}

/**
 * Implementation of hook_uninstall().
 */
function alfresco_uninstall() {

  // Eliminamos variables
  $variables = array(
    'alfresco_credentials_username',
    'alfresco_credentials_password',
    'alfresco_debug_output',
    'alfresco_file_downloads',
    'alfresco_repository_url',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }
  
  // Eliminamos todo los nodos de tipo alfresco_item
  $result = db_query("SELECT nid FROM {node} WHERE type = 'alfresco_item'");
  while ($obj = db_fetch_object($result)) {
    node_delete($obj->nid);
  }

  // Remove the node type.
  node_type_delete('alfresco_item');

  drupal_uninstall_schema('alfresco');
}

/**
 * Implementation of hook_schema().
 */
function alfresco_schema() {
  
  $schema['alfresco_node'] = array(
    'fields' => array(
      /* Drupal node */
      'vid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
      'nid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
  
      /* Alfresco Node Reference */
      'reference' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
  
      /* Alfresco Content Domain Model */
  
      // Filename (Object type)
      'cm_name' => array(
        'description' => 'cm:name property from cm:cmobject',
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
        'default'     => '',
      ),
      
      // Title (Titled aspect)
      'cm_title' => array(
        'description' => 'cm:title property from cm:titled',
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => FALSE,
        'default'     => '',
      ),
      // Description (Titled aspect)
      'cm_description' => array(
        'description' => 'cm:description property from cm:titled',
        'type'        => 'text',
        'not null'    => FALSE,
      ),
      
      // Author (Author aspect)
      'cm_author' => array(
        'description' => 'cm:author property from cm:author',
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => FALSE,
        'default'     => '',
      ),
      
      // Created (Auditable aspect)
      'cm_created' => array(
        'description' => 'cm:created property from cm:auditable',
        'type'        => 'datetime',
        'not null'    => TRUE,
      ),
      // Creator (Auditable aspect)
      'cm_creator' => array(
        'description' => 'cm:creator property from cm:auditable',
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
        'default'     => '',
      ),
      // Modified (Auditable aspect)
      'cm_modified' => array(
        'description' => 'cm:modified property from cm:auditable',
        'type'        => 'datetime',
        'not null'    => TRUE,
      ),
      // Modifier (Auditable aspect)
      'cm_modifier' => array(
        'description' => 'cm:modifier property from cm:auditable',
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
        'default'     => '',
      ),
    ),
    'primary key' => array('vid'),
  );

  // ContentData
  $schema['alfresco_content'] = array(
    'fields' => array(
      'vid' => array(
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'nid' => array(
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'url' => array(
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
        'default'     => '',
      ),
      'mimetype' => array(
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
        'default'     => '',
      ),
      'size' => array(
        'type'        => 'int',
        'unsigned'    => TRUE, 
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'encoding' => array(
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
        'default'     => '',
      ),
    ),
    'primary key' => array('vid'),
  );
  
  return $schema;
}

function _alfresco_check_php_library() {
  $t = get_t();
  
  @include_once "Alfresco/Service/Repository.php";
  if (class_exists('Repository')) {
    return array(
      'value'    => $t('Available via the system\'s include_path'),
      'severity' => REQUIREMENT_OK,
    );
  }
  
  // Add the Alfresco PHP library directory to include path
  $lib_path = drupal_get_path('module', 'alfresco') . '/'. ALFRESCO_PHP_LIBRARY_PATH_INSTALL;
  if (!is_dir($lib_path)) {
    return array(
      'value'       => $t('No such Alfresco PHP Library on module'),
      'description' => $t('Download and copy Alfresco PHP Library on %path.', array('%path' => $lib_path)),
      'severity'    => REQUIREMENT_ERROR,
    );
  }
  
  set_include_path(get_include_path() . PATH_SEPARATOR . $lib_path);
  
  @include_once "Alfresco/Service/Repository.php";
  if (class_exists('Repository')) {
    return array(
      'value'    => $t('Available via module (%path).', array('%path' => $lib_path)),
      'severity' => REQUIREMENT_OK,
    );
  }

  return array(
    'value'       => $t('No available'),
    'description' => $t('Error adding Alfresco PHP Library on include_path.'),
    'severity'    => REQUIREMENT_ERROR,
  );
}

function _alfresco_check_connection_repository() {
  // @todo  Implementar esta funciÃ³n
  $t = get_t();
    
  return array(
    'value' => $t('<a href="@url">Alfresco Labs - v3.0.0 (b 1164)</a>',
      array('@url' => variable_get('alfresco_repository_url', 'http://localhost:8080/alfresco/api'))),
    'severity' => REQUIREMENT_OK,
  );
}
