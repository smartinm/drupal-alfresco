<?php
// $Id$

/**
 * @file
 * Alfresco CCK field, widget and formatter.
 *
 * @see http://drupal.org/node/106716
 * @see http://www.lullabot.com/articles/creating-custom-cck-fields
 */

//==========================================//
// DEFINING A FIELD
//==========================================//

/**
 * Implementation of hook_field_info().
 */
function alfresco_field_field_info() {
  return array(
    // The machine name of the field,
    // no more than 32 characters.
    'alfresco_field' => array(
      // The human-readable label of the field that will be
      // seen in the Manage fields screen.
      'label' => t('Alfresco attachment'),
      // A description of what type of data the field stores.
      'description' => t('Attach an Alfresco node via the repository browser.'),
      // An icon to use in Panels.
      //'content_icon' => 'icon_content_text.png',
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function alfresco_field_field_settings($op, $field) {
  switch ($op) {
    // Create the form element to be used on the field
    // settings form. Field settings will be the same for
    // all shared instances of the same field and should
    // define the way the value will be stored
    // in the database.
    case 'form':
      $vocabularies = taxonomy_get_vocabularies('alfresco_item');
      $taxonomy = array();
      foreach ($vocabularies as $vocabulary) {
        if (!$vocabulary->tags) {
          $value = isset($field['vid_'. $vocabulary->vid]) ? $field['vid_'. $vocabulary->vid] : 0;
          $taxonomy['vid_'. $vocabulary->vid] = taxonomy_form($vocabulary->vid, $value);
        }
      }
      $form = array();
      if (!empty($taxonomy)) {
        $form['taxonomy'] = array(
          '#type' => 'fieldset',
          '#title' => t('Taxonomy default values'),
          '#description' => t('Select taxonomy terms default value for new alfresco items nodes.'),
          '#collapsible' => TRUE,
        );
        $form['taxonomy'][] = $taxonomy;
      }
      return $form;

    // Return an array of the names of the field settings
    // defined by this module. These are the items that
    // CCK will store in the field definition
    // and they will be available in the $field array.
    // This should match the items defined in 'form' above.
    case 'save':
      $settings = array();
      $vocabularies = taxonomy_get_vocabularies('alfresco_item');
      foreach ($vocabularies as $vocabulary) {
        if (!$vocabulary->tags) {
          $settings[] = 'vid_'. $vocabulary->vid;
        }
      }
      return $settings;

    // Define the database storage for this field using
    // the same construct used by schema API. Most fields
    // have only one column, but there can be any number
    // of different columns. After the schema API values,
    // add two optional values to each column,
    //  'views', to define a Views field
    //  'sortable', to add a Views sort field
    case 'database columns':
      $columns = array(
        'nid' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'index' => TRUE,
          //'sortable' => TRUE,
          //'views' => TRUE,
        ),
      );
      return $columns;

    // Optional: Make changes to the default $data array
    // created for Views. Omit this if no changes are
    // needed, use it to add a custom handler or make
    // other changes.
    case 'views data':
      // Start with the $data created by CCK
      // and alter it as needed. The following
      // code illustrates how you would retrieve
      // the necessary data.
      $data = content_views_field_views_data($field);
      $db_info = content_database_info($field);
      $table_alias = content_views_tablename($field);

      // @see nodereference_field_settings()
      // Filter: swap the handler to the 'in' operator.
      $data[$table_alias][$field['field_name'] .'_nid']['filter']['handler'] = 'content_handler_filter_many_to_one';
      // Argument: use node.title for summaries.
      $data["node_$table_alias"]['table']['join']['node'] = array(
        'table' => 'node',
        'field' => 'nid',
        'left_table' => $table_alias,
        'left_field' => $field['field_name'] .'_nid',
      );
      $data[$table_alias][$field['field_name'] .'_nid']['argument']['handler'] = 'content_handler_argument_reference';
      $data[$table_alias][$field['field_name'] .'_nid']['argument']['name table'] = "node_$table_alias";
      $data[$table_alias][$field['field_name'] .'_nid']['argument']['name field'] = 'title';
      // Relationship: add a relationship for related node.
      $data[$table_alias][$field['field_name'] .'_nid']['relationship'] = array(
        'base' => 'node',
        'field' => $db_info['columns']['nid']['column'],
        'handler' => 'content_handler_relationship',
        'label' => t($field['widget']['label']),
        'content_field_name' => $field['field_name'],
      );
      return $data;
  }
}

/**
 * Implementation of hook_field().
 */
function alfresco_field_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    // Do validation on the field values here. The widget
    // will do its own validation and you cannot make any
    // assumptions about what kind of widget has been used,
    // so don't validate widget values, only field values.
    case 'validate':
      if (is_array($items)) {
        foreach ($items as $delta => $item) {
          // The error_element is needed so that CCK can
          // set an error on the right sub-element when
          // fields are deeply nested in the form.
          $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';

          if (is_array($item) && isset($item['_error_element'])) {
            unset($item['_error_element']);
          }

          if (!empty($item['reference'])) {
            $reference = $item['reference'];
            if ($nid = alfresco_exists_node($reference)) {
              if (!node_load($nid)) {
                form_set_error($error_element, t('Error loading alfresco node.', array()));
              }
            }
            else {
              $taxonomy = array();
              foreach (array_keys($field) as $key) {
                if (strpos($key, 'vid_') === 0) {
                  $tid = $field[$key];
                  $taxonomy[$tid] = $tid;
                }
              }
              if (!alfresco_create_node($reference, '', '', array('taxonomy' => $taxonomy))) {
                form_set_error($error_element, t('Error creating alfresco node.', array()));
              }
            }
          }
        }
      }
      return $items;

    case 'insert':
    case 'update':
      foreach ($items as $delta => $item) {
        if (!empty($item['reference'])) {
          $reference = $item['reference'];
          if ($nid = alfresco_exists_node($reference)) {
            if ($alf_node = node_load($nid)) {
              $items[$delta]['nid'] = $alf_node->nid;
            }
          }
        }
        // Solo eliminamos el valor si se ha indicado una referencia vacia.
        elseif (isset($item['reference'])) {
          $items[$delta]['nid'] = NULL;
        }
      }
      return $items;

    // This is where you make sure that user-provided
    // data is sanitized before being displayed.
    case 'sanitize':
      foreach ($items as $delta => $item) {
        $items[$delta]['safe'] = check_plain($item['nid']);
      }
      break;
  }
}

/**
 * Implementation of hook_content_is_empty().
 *
 * CCK has no way to know if something like a zero is
 * an empty value or a valid value, so return
 * TRUE or FALSE to a populated field $item array.
 * CCK uses this to remove empty multi-value elements
 * from forms.
 */
function alfresco_field_content_is_empty($item, $field) {
  if (empty($item['reference']) && empty($item['nid'])) {
    return TRUE;
  }
  return FALSE;
}

//==========================================//
// DEFINING A FORMATTER
//==========================================//

/**
 * Implementation of hook_theme().
 */
function alfresco_field_theme() {
  return array(
    // Themes for the formatters.
    'alfresco_field_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'alfresco_field_formatter_plain' => array(
      'arguments' => array('element' => NULL),
    ),
    // Widget
    'alfresco_field_widget' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 *
 * All fields should have a 'default' formatter.
 * Any number of other formatters can be defined as well.
 * It's nice for there always to be a 'plain' option
 * for the raw value, but that is not required.
 *
 */
function alfresco_field_field_formatter_info() {
  return array(
    // The machine name of the formatter.
    'default' => array(
      // The human-readable label shown on the Display
      // fields screen.
      'label' => t('Default'),
      // An array of the field types this formatter
      // can be used on.
      'field types' => array('alfresco_field'),
      // CONTENT_HANDLE_CORE:   CCK will pass the formatter
      // a single value.
      // CONTENT_HANDLE_MODULE: CCK will pass the formatter
      // an array of all the values. None of CCK's core
      // formatters use multiple values, that is an option
      // available to other modules that want it.
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'plain' => array(
      'label' => t('Plain text'),
      'field types' => array('alfresco_field'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Theme function for 'default' example field formatter.
 *
 * $element['#item']: the sanitized $delta value for the item,
 * $element['#field_name']: the field name,
 * $element['#type_name']: the $node->type,
 * $element['#formatter']: the $formatter_name,
 * $element'#node']: the $node,
 * $element['#delta']: the delta of this item, like '0',
 *
 */
function theme_alfresco_field_formatter_default($element) {
  $field = content_fields($element['#field_name']);
  if ($node = node_load($element['#item']['nid'])) {
    $href = alfresco_url_download($node);
    $icon = theme('alfresco_icon', $node);
    return '<div class="alfresco-field-file clear-block">'. $icon . l($node->title, $href) . ' (' .format_size($node->cm_content['size']) .')' .'</div>';
  }
}

/**
 * Theme function for 'plain' example field formatter.
 */
function theme_alfresco_field_formatter_plain($element) {
  //return strip_tags($element['#item']['safe']);
  if ($alf_node = node_load($element['#item']['nid'])) {
    return url(alfresco_url_download($alf_node), array('absolute' => TRUE));
  }
}

//==========================================//
// DEFINING A WIDGET
//==========================================//

/**
 * Implementation of hook_default_value().
 */
function alfresco_field_default_value(&$form, &$form_state, $field, $delta) {
  // The default value is actually handled in hook_widget().
  // hook_default_value() is only helpful for new nodes, and we need to affect
  // all widgets, such as when a new field is added via "Add another item".
  return array();
}

/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function alfresco_field_widget_info() {
  return array(
    // The machine name of the widget, no more than 32
    // characters.
    'alfresco_field_widget' => array(
      // The human-readable label of the field that will be
      // seen in the Manage fields screen.
      'label' => t('Alfresco browser'),
      // An array of the field types this widget can be
      // used with.
      'field types' => array('alfresco_field'),
      // Who will handle multiple values, default is core.
      // 'CONTENT_HANDLE_MODULE' means the module does it.
      // See optionwidgets for an example of a module that
      // handles its own multiple values.
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        // Who will create the default value, default is core.
        // 'CONTENT_CALLBACK_CUSTOM' means the module does it.
        // 'CONTENT_CALLBACK_NONE' means this widget has
        // no default value.
        'default value' => CONTENT_CALLBACK_CUSTOM,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function alfresco_field_widget_settings($op, $widget) {
  switch ($op) {
    // Create the form element to be used on the widget
    // settings form. Widget settings can be different
    // for each shared instance of the same field and
    // should define the way the value is displayed to
    // the user in the edit form for that content type.
    case 'form':
      return;
      $form = array();
      $size = (isset($widget['size']) && is_numeric($widget['size'])) ? $widget['size'] : 60;
      $form['size'] = array(
        '#type' => 'textfield',
        '#title' => t('Size of textfield'),
        '#default_value' => $size,
        '#element_validate' => array('_element_validate_integer_positive'),
        '#required' => TRUE,
      );
      return $form;

    // Return an array of the names of the widget settings
    // defined by this module. These are the items that
    // CCK will store in the widget definition and they
    // will be available in the $field['widget'] array.
    // This should match the items defined in 'form' above.
    case 'save':
      return;
      return array('size');
  }
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form.
 *
 * CCK core fields only add a stub element and builds
 * the complete item in #process so reusable elements
 * created by hook_elements can be plugged into any
 * module that provides valid $field information.
 *
 * Custom widgets that don't care about using hook_elements
 * can be built out completely at this time.
 *
 * If there are multiple values for this field and CCK is
 * handling multiple values, the content module will call
 * this function as many times as needed.
 *
 * @param $form
 *   the entire form array,
 *   $form['#node'] holds node information
 * @param $form_state
 *   the form_state,
 *   $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of
 *   subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function alfresco_field_widget(&$form, &$form_state, $field, $items, $delta = 0) {

  // @todo: Reutilizar 'alfresco_browser' element

  $element['#theme'] = 'alfresco_field_widget';

  $defaults = array(
    'reference' => NULL,
    'name' => NULL,
  );
  if (isset($items[$delta]['nid'])) {
    if ($alf_node = node_load($items[$delta]['nid'])) {
      $path = !empty($alf_node->alfresco_path) ? $alf_node->alfresco_path .'/' : '';
      $defaults['reference'] = $alf_node->reference;
      $defaults['name'] = $path . $alf_node->cm_name;
    }
  }

  $element['nid'] = array(
    '#type' => 'hidden',
    '#value' => isset($items[$delta]['nid']) ? $items[$delta]['nid'] : NULL,
  );

  $element['reference'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($items[$delta]['reference']) ? $items[$delta]['reference'] : $defaults['reference'],
    '#attributes' => array('class' => 'alfresco-browser-reference'),
  );

  $element['name'] = array(
    '#type' => 'textfield',
    '#maxlength' => 255,
    '#default_value' => isset($items[$delta]['name']) ? $items[$delta]['name'] : $defaults['name'],
    '#attributes' => array('class' => 'alfresco-browser-name', 'readonly' => TRUE),
  );

  if (!empty($alf_node)) {
    $title = truncate_utf8($alf_node->title, 50, FALSE, TRUE);
    $filesize = format_size($alf_node->cm_content['size']);
    $mimetype = $alf_node->cm_content['mimetype'];
    $element['link'] = array(
      '#type' => 'markup',
      '#value' => '<div class="alfresco-browser-info">'. l($title, 'node/'. $alf_node->nid) .' ('. $filesize .', '. $mimetype .')</div>',
    );
  }

  $element['button'] = array(
    '#type' => 'markup',
    '#value' => '<input type="button" class="alfresco-browser-button" value="'. t('Browse...') .'" />',
  );

  // Used so that hook_field('validate') knows where to flag an error.
  if (empty($form['#parents'])) {
    $form['#parents'] = array();
  }
  $error_element = array_merge(array($field['field_name']), array($delta), array('name'));
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($form['#parents'], $error_element)),
  );

  return $element;
}

function theme_alfresco_field_widget($element) {
  if (!module_exists('alfresco_browser')) {
    return;
  }
  alfresco_browser_add_js();
  drupal_add_css(drupal_get_path('module', 'alfresco_field') .'/alfresco_field.css');
  return theme('form_element', $element, '<div class="container-inline alfresco-browser-container clear-block">'. drupal_render($element) .'</div>');
}
