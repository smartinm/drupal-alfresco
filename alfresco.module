<?php
// $Id$
 
/**
 * @file
 * Enables Alfresco and Drupal integration.
 * 
 * - Alfresco help hooks
 * - Alfresco node and permissions hooks
 * - Alfresco menu hooks
 * - Alfresco theme hooks
 * - Alfresco files helper functions
 * - Alfresco util helper functions
 * - Alfresco debug helper functions
 */

// Relative path to Alfresco PHP Library
define('ALFRESCO_PHP_LIBRARY_PATH', 'alfresco-php-library');

// Default value for alfresco_debug_output variable.
define('ALFRESCO_DEBUG_OUTPUT', TRUE);

// Alfresco file downloads methods.
// @see http://wiki.alfresco.com/wiki/URL_Addressability
define('ALFRESCO_FILE_DOWNLOADS_MODULE', 1);  // Private transfer
define('ALFRESCO_FILE_DOWNLOADS_GUEST',  2);  // Direct Guest URL
define('ALFRESCO_FILE_DOWNLOADS_TICKET', 3);  // Direct Ticket URL

/**
 * 
 */
define('ALFRESCO_SYNC_TIME', 21600);

/**
 * 
 */
define('ALFRESCO_SYNC_LIMIT', 10);


// Include required files
if (function_exists('drupal_get_path')) {
  $path = drupal_get_path('module', 'alfresco');
  require_once $path .'/alfresco.content.inc';
  require_once $path .'/alfresco.ws.inc';
}

// ------------------------------------------------------------------
// Alfresco help hooks
// ------------------------------------------------------------------

/**
 * Implementation of hook_help().
 */
function alfresco_help($path, $arg) {

  switch ($path) {
    case 'admin/help#alfresco':
      return '<p>'. t('Alfresco and Drupal integration.') .'</p>';
  }
}

// ------------------------------------------------------------------
// Alfresco node and permissions hooks
// ------------------------------------------------------------------

/**
 * Implementation of hook_node_info().
 * 
 * Provides a new "alfresco_item" node content type.
 */
function alfresco_node_info() {

  return array(
    'alfresco_item' => array(
      'name'        => t('Alfresco item'),
      'module'      => 'alfresco',
      'description' => t('An <em>alfresco item</em> is a reference to node stored in Alfresco repository. Alfresco node can be content items o spaces.'),
      'has_title'   => TRUE,
      'title_label' => t('Title'),
      'has_body'    => TRUE,
      'body_label'  => t('Body'),
    )
  );
}

/**
 * Implementation of hook_perm().
 *
 * Since we are limiting the ability to create new nodes to certain users,
 * we need to define what those permissions are here. We also define a permission
 * to allow users to edit the nodes they created.
 */
function alfresco_perm() {

  return array(
    'administer alfresco',
    'create alfresco content',
    'delete own alfresco content',
    'delete any alfresco content',
    'download alfresco content',
    'edit own alfresco content',
    'edit any alfresco content',
  );
}

/**
 * Implementation of hook_access().
 *
 * Node modules may implement node_access() to determine the operations
 * users may perform on nodes. This example uses a very common access pattern.
 */
function alfresco_access($op, $node, $account) {

  if ($op == 'create') {
    return user_access('create alfresco content', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any alfresco content', $account) || (user_access('edit own alfresco content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any alfresco content', $account) || (user_access('delete own alfresco content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

// ------------------------------------------------------------------
// Alfresco menu hooks
// ------------------------------------------------------------------

/**
 * Implementation of hook_menu().
 */
function alfresco_menu() {
  $items['admin/settings/alfresco'] = array(
    'title' => 'Alfresco',
    'description' => 'Configure Alfresco.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alfresco_admin_overview'),  
    'access arguments' => array('administer alfresco'),
    'file' => 'alfresco.admin.inc',
  );
  
  $items['admin/settings/alfresco/repository'] = array(
    'title' => 'Repository',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['admin/settings/alfresco/display'] = array(
    'title' => 'Display',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alfresco_admin_display'),
    'access arguments' => array('administer alfresco'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/settings/alfresco',
    'file' => 'alfresco.admin.inc',
  );
  
  $items['admin/settings/alfresco/advanced'] = array(
    'title' => 'Advanced',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alfresco_admin_advanced'),
    'access arguments' => array('administer alfresco'),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/settings/alfresco',
    'file' => 'alfresco.admin.inc',
  );
  
  $items['node/%alfresco_node/download/%alfresco_name'] = array(
    'title' => 'Download',
    'page callback' => 'alfresco_page_download',
    'page arguments' => array(1),
    'access callback' => '_alfresco_download_access',
    'access arguments' => array(1),
    'weight' => 5,   
    'type' => MENU_LOCAL_TASK,
    'file' => 'alfresco.pages.inc',
  );

  $items['node/%alfresco_node/sync'] = array(
    'title' => 'Synchronize',
    'page callback' => 'alfresco_page_sync',
    'page arguments' => array(1),
    'access callback' => '_alfresco_administer_access',
    'access arguments' => array(1),
    'weight' => 6,   
    'type' => MENU_LOCAL_TASK,
    'file' => 'alfresco.pages.inc',
  );

  $items['node/%alfresco_node/details'] = array(
    'title' => 'Details',
    'page callback' => 'alfresco_page_details',
    'page arguments' => array(1),
    'access callback' => '_alfresco_administer_access',
    'access arguments' => array(1),
    'weight' => 7,   
    'type' => MENU_LOCAL_TASK,
    'file' => 'alfresco.pages.inc',
  );
  
  return $items;
}

function _alfresco_download_access($node) {
  return user_access('download alfresco content') && ($node->type == 'alfresco_item' && !empty($node->cm_content));
}

function _alfresco_administer_access($node) {
  return user_access('administer alfresco') && ($node->type == 'alfresco_item');
}

/**
 * Menu callback; loads an alfresco node object.
 * 
 * @see http://drupal.org/node/209056
 */
function alfresco_node_load($arg) {
  
  if (!is_numeric($arg)) {
    return FALSE;
  }
  $node = node_load($arg);

  if (!$node || $node->type != 'alfresco_item') {
    return FALSE;
  }
  return $node;
}

/**
 * Menu callback; loads the name of alfresco node object.
 */
function alfresco_name_load($arg) {
  return $arg;
}

/**
 * Returns the name (filename) of the currently alfresco node.
 * 
 * @see http://drupal.org/node/109153#to_arg
 */
function alfresco_name_to_arg($arg) {
  
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    if ($node && $node->type == 'alfresco_item') {
      return $node->cm_name;
    }
  }
  return $arg;
}

// ------------------------------------------------------------------
// Alfresco cron hooks
// ------------------------------------------------------------------

/**
 * Implementation of hook_cron().
 * 
 * @see ALFRESCO_SYNC_TIME
 * @see ALFRESCO_SYNC_LIMIT
 */
function alfresco_cron() {

  // Sincronizaci√≥n de nodos de Alfresco
  $result = db_query_range('SELECT nid FROM {alfresco_node} WHERE timestamp < %d ORDER BY timestamp DESC', time() - ALFRESCO_SYNC_TIME, 0, ALFRESCO_SYNC_LIMIT);
  
  while ($node = db_fetch_object($result)) {
    alfresco_sync_node($node);
  }
}

// ------------------------------------------------------------------
// Alfresco theme hooks
// ------------------------------------------------------------------

/**
 * Implementation of hook_theme()
 */
function alfresco_theme() {
  return array(
    'alfresco_properties_table' => array(
      'arguments' => array('form' => NULL),
      'file' => 'alfresco.admin.inc',
    ),
  );
}

// ------------------------------------------------------------------
// Alfresco files helper functions
// ------------------------------------------------------------------

/**
 * Return URL for download the alfresco file.
 */
function alfresco_url_download($node) {

  if ($node->type == 'alfresco_item' && !empty($node->cm_content)) {
    return 'node/'. $node->nid .'/download/'. $node->cm_name;
  }
}

/**
 * Transfer file using http to client. Pipes a file through Drupal to the client.
 * 
 * @see file_transfer()
 * @see http://w-shadow.com/blog/2007/08/12/how-to-force-file-download-with-php/
 * @see http://www.phpclasses.org/browse/file/9051.html
 * @see http://www.php-mysql-tutorial.com/php-tutorial/php-read-remote-file.php
 * @see http://htmlblog.net/10-code-snippets-for-php-developers/
 */
function alfresco_file_transfer($node) {
  
  $alf_node = alfresco_service_load_node($node->reference);
  if (!$alf_node) {
    drupal_not_found();
    exit();
  }
  $alf_data = $alf_node->cm_content;
  
  if (!$alf_data) {
    drupal_not_found();
    exit();
  }

  $name = $alf_node->cm_name;
  $url  = $alf_data->url;
  $size = $alf_data->size;
  $mime = $alf_data->mimetype;
  
  if (ob_get_level()) {
    ob_end_clean();
  }

  drupal_set_header('Content-Type: '. $mime);
  drupal_set_header('Content-Length: '. $size);
  //drupal_set_header('Content-Disposition: attachment; filename="' . $name . '"');
  
  // Transfer file in 1024 byte chunks to save memory usage.
  if ($fd = fopen($url, 'rb')) {
    while (!feof($fd)) {
      print fread($fd, 1024);
    }
    fclose($fd);
  }
  else {
    drupal_not_found();
  }
  exit();
}

// ------------------------------------------------------------------
// Alfresco util helper functions
// ------------------------------------------------------------------

/**
 * Verify the syntax of the given Alfresco Node Reference.
 * 
 * @param $reference
 *   A string containing an Alfresco Node Reference.
 * @return
 *   TRUE if the reference is in a valid format.
 *   
 * @see http://wiki.alfresco.com/wiki/Web_Service_Data_Types
 */
function alfresco_valid_reference($reference) {
  $uuid = '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}';
  return preg_match("/^\w+:\/\/\w+\/$uuid$/", $reference);
}

/**
 * Parse a given Alfresco Node Reference.
 * 
 * @param $reference
 *   A string containing an Alfresco Node Reference.
 * @return
 *   FALSE, if the reference is in an invalid format. Otherwise, a
 *   keyed array containing the components:
 *    'reference' - Reference (same)
 *    'scheme'    - Scheme.
 *    'address'   - Address.
 *    'uuid'      - UUID.
 *   If the component parameter is specified a string is returned
 *   instead of an array.
 */
function alfresco_parse_reference($reference, $component = '') {
  
  $uuid = '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}';
  if (preg_match("/^(\w+):\/\/(\w+)\/($uuid)$/", $reference, $matches)) {
    $info = array();
    $info['reference'] = $matches[0];
    $info['scheme']    = $matches[1];
    $info['address']   = $matches[2];
    $info['uuid']      = $matches[3];
    if (!empty($component)) {
      return $info[$component];
    }
    return $info;
  }
  return FALSE;
}

/**
 * Present a size (in bytes) as a human-readable value
 *
 * @param int    $size        size (in bytes)
 * @param int    $precision    number of digits after the decimal point
 * @return string
 * 
 * @see http://php.net/manual/es/function.filesize.php#84652
 */
function alfresco_size_to_string($size, $precision = 0) {
  $sizes = array('YB', 'ZB', 'EB', 'PB', 'TB', 'GB', 'MB', 'KB', 'B');
  $total = count($sizes);
  
  // Si el tama√±o es inferior a 1024 B y superior a 1024/10 B
  // se muestra como 0.xx KB en vez de en Bytes.
  if ($size < 1024 && $size > 1024 / 10) {
    return round($size / 1024, $precision) .' KB';
  }
  
  while($total-- && $size > 1024) {
    $size /= 1024;
  }
  
  return round($size, $precision) .' '. $sizes[$total];
}

// ------------------------------------------------------------------
// Alfresco debug helper functions
// ------------------------------------------------------------------

/**
 * Provide debug output for Alfresco.
 */
function alfresco_debug($message) {
  if (module_exists('devel') && variable_get('alfresco_debug_output', ALFRESCO_DEBUG_OUTPUT)) {
    dpm($message);
  }
}

/**
 * Shortcut to alfresco_debug()
 */
function apm($message) {
  alfresco_debug($message);
}
