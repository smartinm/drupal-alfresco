<?php
// $Id$
 
/**
 * @file
 * ImplementaciÃ³n del tipo de contenido Alfresco content.
 */

/**
 * 
 */
define('ALFRESCO_PHP_LIBRARY_PATH', 'alfresco-php-library');


if (function_exists('drupal_get_path')) {
  $path = drupal_get_path('module', 'alfresco');
  if (file_exists($path .'/alfresco.inc')) {
    require_once  $path .'/alfresco.inc';
  }
}

/**
 * Implementation of hook_help().
 */
function alfresco_help($path, $arg) {

  switch ($path) {
    case 'admin/help#alfresco':
      return '<p>'. t('Alfresco integration.') .'</p>';
  }
}

/**
 * Implementation of hook_perm().
 *
 * Since we are limiting the ability to create new nodes to certain users,
 * we need to define what those permissions are here. We also define a permission
 * to allow users to edit the nodes they created.
 */
function alfresco_perm() {

  return array(
    'administer alfresco configuration',
    'create alfresco content',
    'delete own alfresco content',
    'delete any alfresco content',
    'download alfresco content',
    'edit own alfresco content',
    'edit any alfresco content',
  );
}

function _alfresco_download_access($node) {
  return node_access('download alfresco content', $node) && ($node->type == 'alfresco_item');
}

/**
 * Implementation of hook_menu().
 */
function alfresco_menu() {
  $items['admin/settings/alfresco'] = array(
    'title' => 'Alfresco',
    'description' => "Configure Alfresco.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alfresco_admin_overview'),  
    'access arguments' => array('administer alfresco configuration'),
    'file' => 'alfresco.admin.inc',
  );
  
  $items['node/%node/download'] = array(
    'title' => 'Download file',
    'page callback' => 'alfresco_file_download',
    'page arguments' => array(1),
    'access callback' => '_alfresco_download_access',
    'access arguments' => array(1),   
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}

/**
 * @see http://www.php-mysql-tutorial.com/php-tutorial/php-read-remote-file.php
 * @see http://htmlblog.net/10-code-snippets-for-php-developers/
 */
function alfresco_file_download($node) {
  $url = "http://localhost:8080/alfresco/download/direct/workspace/SpacesStore/c55a02a0-bbc3-11dd-b785-274d22f26a6c/produccion_20081002_1208.pdf?ticket=TICKET_18d018cf9291e9a3f85683d3f4726dce1643174a";
  
  // make sure the remote file is successfully opened before doing anything else
  if ($fp = fopen($url, 'r')) {
     $content = '';
     // keep reading until there's nothing left
     while ($line = fread($fp, 1024)) {
        $content .= $line;
     }

     //header("Content-type: application/octet-stream");
     //header("Content-Length: " . sizeof($content));
     drupal_set_header('Content-type: application/octet-stream');
     
     print $content;
     // do something with the content here
     // ...
  } else {
     // an error occured when trying to open the specified url
  }
}

/**
 * Implementation of hook_node_info().
 * 
 * Define un nuevo tipo de contenido 'alfresco_item'.
 */
function alfresco_node_info() {

  return array(
    'alfresco_item' => array(
      'name' => t('Alfresco item'),
      'module' => 'alfresco',
      'description' => t("This is an example node type with a few fields."),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'has_body' => TRUE,
      'body_label' => t('Body'),
    )
  );
}

/**
 * Implementation of hook_access().
 *
 * Node modules may implement node_access() to determine the operations
 * users may perform on nodes. This example uses a very common access pattern.
 */
function alfresco_access($op, $node, $account) {

  if ($op == 'create') {
    return user_access('create alfresco content', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any alfresco content', $account) || (user_access('edit own alfresco content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any alfresco content', $account) || (user_access('delete own alfresco content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_init().
 */
function alfresco_init() {
  $alfresco_path = drupal_get_path('module', 'alfresco') . '/'. ALFRESCO_PHP_LIBRARY_PATH;
  ini_set('include_path', ini_get('include_path') . PATH_SEPARATOR . $alfresco_path);
  //set_exception_handler('_alfresco_exception_handler');
}
