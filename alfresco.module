<?php
// $Id$
 
/**
 * @file
 * ImplementaciÃ³n del tipo de contenido Alfresco content.
 */

define('ALFRESCO_DEBUG_MODE', TRUE);

/**
 * 
 */
define('ALFRESCO_PHP_LIBRARY_PATH', 'alfresco-php-library');

define('ALFRESCO_FILE_DOWNLOADS_DIRECT', 1);
define('ALFRESCO_FILE_DOWNLOADS_MODULE', 2);

if (function_exists('drupal_get_path')) {
  $path = drupal_get_path('module', 'alfresco');
  if (file_exists($path .'/alfresco.inc')) {
    require_once $path .'/alfresco.inc';
    require_once $path .'/alfresco.ws.inc';
  }
}

/**
 * Implementation of hook_help().
 */
function alfresco_help($path, $arg) {

  switch ($path) {
    case 'admin/help#alfresco':
      return '<p>'. t('Alfresco and Drupal integration.') .'</p>';
  }
}

/**
 * Implementation of hook_perm().
 *
 * Since we are limiting the ability to create new nodes to certain users,
 * we need to define what those permissions are here. We also define a permission
 * to allow users to edit the nodes they created.
 */
function alfresco_perm() {

  return array(
    'administer alfresco',
    'create alfresco content',
    'delete own alfresco content',
    'delete any alfresco content',
    'download alfresco content',
    'edit own alfresco content',
    'edit any alfresco content',
  );
}

function _alfresco_download_access($node) {
  return user_access('download alfresco content') && ($node->type == 'alfresco_item' && !empty($node->cm_content));
}

function _alfresco_sync_access($node) {
  return user_access('administer alfresco') && ($node->type == 'alfresco_item');
}

/**
 * Implementation of hook_menu().
 */
function alfresco_menu() {
  $items['admin/settings/alfresco'] = array(
    'title' => 'Alfresco',
    'description' => 'Configure Alfresco.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alfresco_admin_overview'),  
    'access arguments' => array('administer alfresco'),
    'file' => 'alfresco.admin.inc',
  );
  
  $items['admin/settings/alfresco/repository'] = array(
    'title' => 'Repository',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['admin/settings/alfresco/display'] = array(
    'title' => 'Display',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alfresco_admin_display'),
    'access arguments' => array('administer alfresco'),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/settings/alfresco',
    'file' => 'alfresco.admin.inc',
  );
  
  $items['node/%node/download/%alfresco_name'] = array(
    'title' => 'Download file',
    'page callback' => 'alfresco_file_download',
    'page arguments' => array(1),
    'access callback' => '_alfresco_download_access',
    'access arguments' => array(1),   
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%node/sync'] = array(
    'title' => 'Synchronize',
    'page callback' => 'alfresco_sync_node',
    'page arguments' => array(1),
    'access callback' => '_alfresco_sync_access',
    'access arguments' => array(1),
    'weight' => 5,   
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}

/*
function alfresco_name_load($arg) {
  dpm("alfresco_name_load ($arg)");
}
*/

function alfresco_name_to_arg($arg) {
  
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    if ($node && $node->type == 'alfresco_item') {
      return $node->cm_name;
    }
  }
  return $arg;
}

/**
 * Implementation of hook_theme()
 */
function alfresco_theme() {
  return array(
    'alfresco_properties_table' => array(
      'arguments' => array('form' => NULL),
      'file' => 'alfresco.admin.inc',
    ),
  );
}

/**
 * @see http://www.php-mysql-tutorial.com/php-tutorial/php-read-remote-file.php
 * @see http://htmlblog.net/10-code-snippets-for-php-developers/
 */
function alfresco_file_download($node) {
  
  $alf_node = alfresco_service_load_node($node->reference);
  $alf_data = $alf_node->cm_content;
  
  if (!$alf_data) {
    drupal_not_found();
    return;
  }
    
  $url  = $alf_data->url;
  $size = $alf_data->size;
  $mime = $alf_data->mimetype;
  
  // make sure the remote file is successfully opened before doing anything else
  if ($fp = fopen($url, 'rb')) {
     drupal_set_header('Content-type: '. $mime);
     drupal_set_header('Content-Length: '. $size);
    
     // keep reading until there's nothing left
     while ($line = fread($fp, 1024)) {
        print $line;
     }
     fclose($fp);
     
  } else {
     drupal_not_found();
  }
}

function alfresco_sync_node($node) {
  dpm("alfresco_sync_node");
}

/**
 * Implementation of hook_node_info().
 * 
 * Define un nuevo tipo de contenido 'alfresco_item'.
 */
function alfresco_node_info() {

  return array(
    'alfresco_item' => array(
      'name' => t('Alfresco item'),
      'module' => 'alfresco',
      'description' => t("This is an example node type with a few fields."),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'has_body' => TRUE,
      'body_label' => t('Body'),
    )
  );
}

/**
 * Implementation of hook_access().
 *
 * Node modules may implement node_access() to determine the operations
 * users may perform on nodes. This example uses a very common access pattern.
 */
function alfresco_access($op, $node, $account) {

  if ($op == 'create') {
    return user_access('create alfresco content', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any alfresco content', $account) || (user_access('edit own alfresco content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any alfresco content', $account) || (user_access('delete own alfresco content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_init().
 */
function alfresco_init() {
  //$alfresco_path = drupal_get_path('module', 'alfresco') . '/'. ALFRESCO_PHP_LIBRARY_PATH;
  //ini_set('include_path', ini_get('include_path') . PATH_SEPARATOR . $alfresco_path);
  //set_exception_handler('_alfresco_exception_handler');
}


/**
 * Verify the syntax of the given Alfresco Node Reference.
 * 
 * @param $reference
 *   A string containing an Alfresco Node Reference.
 * @return
 *   TRUE if the reference is in a valid format.
 *   
 * @see http://wiki.alfresco.com/wiki/Web_Service_Data_Types
 */
function alfresco_valid_reference($reference) {
  $uuid = '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}';
  return preg_match("/^\w+:\/\/\w+\/$uuid$/", $reference);
}

/**
 * Parse a given Alfresco Node Reference.
 * 
 * @param $reference
 *   A string containing an Alfresco Node Reference.
 * @return
 *   FALSE, if the reference is in an invalid format. Otherwise, a
 *   keyed array containing the components:
 *    'reference' - Reference (same)
 *    'scheme'    - Scheme.
 *    'address'   - Address.
 *    'uuid'      - UUID.
 *   If the component parameter is specified a string is returned
 *   instead of an array.
 */
function alfresco_parse_reference($reference, $component = '') {
  
  $uuid = '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}';
  if (preg_match("/^(\w+):\/\/(\w+)\/($uuid)$/", $reference, $matches)) {
    $info = array();
    $info['reference'] = $matches[0];
    $info['scheme']    = $matches[1];
    $info['address']   = $matches[2];
    $info['uuid']      = $matches[3];
    if (!empty($component)) {
      return $info[$component];
    }
    return $info;
  }
  return FALSE;
}

/**
 * Present a size (in bytes) as a human-readable value
 *
 * @param int    $size        size (in bytes)
 * @param int    $precision    number of digits after the decimal point
 * @return string
 * 
 * @see http://php.net/manual/es/function.filesize.php#84652
 */
function alfresco_bytestostring($size, $precision = 0) {
    $sizes = array('YB', 'ZB', 'EB', 'PB', 'TB', 'GB', 'MB', 'KB', 'B');
    $total = count($sizes);

    if ($size < 1024 && $size > 1024 / 10) {
      return round($size / 1024, $precision) .' KB';
    }
    
    while($total-- && $size > 1024) $size /= 1024;
    return round($size, $precision) .' '. $sizes[$total];
}

function alfresco_debug() {
  return (ALFRESCO_DEBUG_MODE && module_exists('devel'));
}
