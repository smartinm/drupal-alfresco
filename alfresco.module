<?php
// $Id$

/**
 * @file
 * Enables Alfresco and Drupal integration.
 *
 * Contents of this file
 * =====================
 * 0. Constants, includes and views support
 * 1. Help hooks
 * 2. Node info and permissions
 * 3. Menu hooks
 * 1. Edit node form
 * 2. Validate node functions
 * 3. Submit node functions
 * 4. Database functions
 * 5. View functions
 * 4. Cron hooks
 * 5. Theme hooks
 * 6. Files helper functions
 * 7. Utils helper functions
 */

// ------------------------------------------------------------------
// =0 Constants, includes and views support
// ------------------------------------------------------------------

// Alfresco file downloads methods.
// More info: http://wiki.alfresco.com/wiki/URL_Addressability
define('ALFRESCO_FILE_DOWNLOADS_MODULE', 1);  // Private transfer
define('ALFRESCO_FILE_DOWNLOADS_GUEST',  2);  // Direct Guest URL
define('ALFRESCO_FILE_DOWNLOADS_TICKET', 3);  // Direct Ticket URL

// Alfresco authentication methods.
define('ALFRESCO_AUTH_SINGLE',   1);
define('ALFRESCO_AUTH_PER_USER', 2);

// Regex string for any variety of ISO and DATETIME formats (from date_api.module)
define('ALFRESCO_REGEX_DATE_LOOSE', '/(\d{4})-?(\d{2})-?(\d{2})([T\s]?(\d{2}):?(\d{2}):?(\d{2})?(\.\d+)?(Z|[\+\-]\d{2}:?\d{2})?)?/');

// Alfresco Node UUID regex
define('ALFRESCO_REGEX_NODE_UUID', '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}');

// Including dependencies.
require_once(dirname(__FILE__) .'/includes/alfresco.service.inc');

// ------------------------------------------------------------------
// =1 Help hooks
// ------------------------------------------------------------------

/**
 * Implementation of hook_help().
 */
function alfresco_help($path, $arg) {

  switch ($path) {
    case 'admin/help#alfresco':
      return '<p>'. t('Alfresco and Drupal integration.') .'</p>';
  }
}

// ------------------------------------------------------------------
// =2 Node info and permissions hooks
// ------------------------------------------------------------------

/**
 * Implementation of hook_node_info().
 *
 * Provides a new 'alfresco_item' node content type.
 */
function alfresco_node_info() {

  return array(
    'alfresco_item' => array(
      'name'        => t('Alfresco item'),
      'module'      => 'alfresco',
      'description' => t('An <em>alfresco item</em> is a reference to node stored in Alfresco repository.'),
      'has_title'   => TRUE,
      'title_label' => t('Title'),
      'has_body'    => TRUE,
      'body_label'  => t('Body'),
    )
  );
}

/**
 * Implementation of hook_perm().
 *
 * Since we are limiting the ability to create new nodes to certain users,
 * we need to define what those permissions are here. We also define a permission
 * to allow users to edit the nodes they created.
 */
function alfresco_perm() {

  return array(
    'administer alfresco',
    'create alfresco content',
    'delete own alfresco content',
    'delete any alfresco content',
    'download alfresco content',
    'edit own alfresco content',
    'edit any alfresco content',
  );
}

/**
 * Implementation of hook_access().
 *
 * Determine the operations users may perform on nodes. This uses a very common
 * access pattern.
 */
function alfresco_access($op, $node, $account) {

  if ($op == 'create') {
    return user_access('create alfresco content', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any alfresco content', $account) || (user_access('edit own alfresco content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any alfresco content', $account) || (user_access('delete own alfresco content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

// ------------------------------------------------------------------
// =3 Menu hooks
// ------------------------------------------------------------------

/**
 * Implementation of hook_menu().
 */
function alfresco_menu() {

  $items['admin/settings/alfresco'] = array(
    'title' => 'Alfresco',
    'description' => 'Configure Alfresco.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alfresco_admin_overview'),
    'access arguments' => array('administer alfresco'),
    'file' => 'alfresco.admin.inc',
  );

  $items['admin/settings/alfresco/repository'] = array(
    'title' => 'Repository',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/settings/alfresco/display'] = array(
    'title' => 'Display',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alfresco_admin_display'),
    'access arguments' => array('administer alfresco'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/settings/alfresco',
    'file' => 'alfresco.admin.inc',
  );

  $items['admin/settings/alfresco/advanced'] = array(
    'title' => 'Advanced',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alfresco_admin_advanced'),
    'access arguments' => array('administer alfresco'),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/settings/alfresco',
    'file' => 'alfresco.admin.inc',
  );

  $items['node/%alfresco_node/download/%alfresco_name'] = array(
    'title' => 'Download',
    'page callback' => 'alfresco_page_download',
    'page arguments' => array(1),
    'access callback' => '_alfresco_download_access',
    'access arguments' => array(1),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
    'file' => 'alfresco.pages.inc',
  );

  $items['node/%alfresco_node/sync'] = array(
    'title' => 'Synchronize',
    'page callback' => 'alfresco_page_sync',
    'page arguments' => array(1),
    'access callback' => '_alfresco_administer_access',
    'access arguments' => array(1),
    'weight' => 6,
    'type' => MENU_LOCAL_TASK,
    'file' => 'alfresco.pages.inc',
  );

  $items['node/%alfresco_node/details'] = array(
    'title' => 'Details',
    'page callback' => 'alfresco_page_details',
    'page arguments' => array(1),
    'access callback' => '_alfresco_administer_access',
    'access arguments' => array(1),
    'weight' => 7,
    'type' => MENU_LOCAL_TASK,
    'file' => 'alfresco.pages.inc',
  );

  return $items;
}

function _alfresco_download_access($node) {
  return user_access('download alfresco content') && node_access('view', $node) && ($node->type == 'alfresco_item' && !empty($node->cm_content));
}

function _alfresco_administer_access($node) {
  return user_access('administer alfresco') && ($node->type == 'alfresco_item');
}

/**
 * Menu callback; loads an alfresco node object.
 *
 * @see http://drupal.org/node/209056
 */
function alfresco_node_load($arg) {

  if (!is_numeric($arg)) {
    return FALSE;
  }
  $node = node_load($arg);

  if (!$node || $node->type != 'alfresco_item') {
    return FALSE;
  }
  return $node;
}

/**
 * Menu callback; loads the name of alfresco node object.
 */
function alfresco_name_load($arg) {
  return $arg;
}

/**
 * Returns the name (filename) of the currently alfresco node.
 *
 * @see http://drupal.org/node/109153#to_arg
 */
function alfresco_name_to_arg($arg) {

  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    if ($node && $node->type == 'alfresco_item') {
      return $node->cm_name;
    }
  }
  return $arg;
}

// ------------------------------------------------------------------
// =1 Edit node form
// ------------------------------------------------------------------

/**
 * Implementation of hook_form().
 */
function alfresco_form(&$node, $form_state) {

  drupal_add_js(drupal_get_path('module', 'alfresco') .'/alfresco.js');

  // The site admin can decide if this node type has a title and body, and how
  // the fields should be labeled. We need to load these settings so we can
  // build the node form correctly.
  $type = node_get_types('type', $node);

  $form['reference'] = array(
    '#type' => 'textfield',
    '#title' => $type->name,
    '#description' => t('Alfresco Node Reference. Example: workspace://SpacesStore/uuid'),
    '#default_value' => isset($node->reference) ? $node->reference : '',
    '#required' => TRUE,
    '#weight' => -6,
  );

  if (module_exists('alfresco_browser')) {
    $form['reference']['#type'] = 'alfresco_browser';
    $form['reference']['#description'] = t('Select an item from Alfresco repository.');
  }

  if ($type->has_title) {
    $form['use_title'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use Alfresco node title.'),
      '#description' => t('Deje esta campo marcado para obtener el título automáticamente del nodo de Alfresco, si desea indicar un título desmárquelo.'),
      '#default_value' => TRUE,
      '#weight' => -5
    );

    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => FALSE,
      '#default_value' => $node->title,
      '#maxlength' => 255,
      '#weight' => -5,
      '#attributes' => array('readonly' => 'readonly'),
      '#prefix' => '<div id="alfresco-edit-title-wrapper">',
      '#suffix' => '</div>',
    );
  }

  if ($type->has_body) {
    // In Drupal 6, we can use node_body_field() to get the body and filter
    // elements. This replaces the old textarea + filter_form() method of
    // setting this up. It will also ensure the teaser splitter gets set up
    // properly.
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }

  $form['#validate'][] = 'alfresco_form_validate';
  $form['#submit'][]   = 'alfresco_form_submit';

  return $form;
}

// ------------------------------------------------------------------
// =2 Validate node functions
// ------------------------------------------------------------------

/**
 * Valida que la referencia al nodo de alfresco es correcta, comprueba que el nodo existe y obtiene el título.
 *
 * @see alfresco_form_submit
 * @see http://drupal.org/node/144132#passing
 */
function alfresco_form_validate($form, &$form_state) {

  if ($form_state['values']['reference']) {
    $reference = $form_state['values']['reference'];

    if (!alfresco_valid_reference($reference)) {
      form_set_error('reference', t('The alfresco node reference is not valid.'));
    }
    else {
      // Load node from alfresco repository.
      $alf_node = alfresco_service_load_node($reference);
      if ($alf_node) {
        $form_state['alf_node'] = $alf_node;
      }
      else {
        // Alfresco node not found.
        $nid = $form_state['values']['nid'];
        if ($nid) {
          // Node edit
          $url_edit   = url('node/'. $nid .'/edit', array('fragment' => 'edit-reference-wrapper'));
          $url_delete = url('node/'. $nid .'/delete');

          form_set_error('reference',
            t('The node is not found in the repository. <a href="@url_edit">Edit Alfresco node reference</a> or <a href="@url_delete">delete this node</a>.',
              array('@url_edit' => $url_edit, '@url_delete' => $url_delete)));

          watchdog('alfresco', 'The node is not found in the repository.', NULL, WATCHDOG_NOTICE, l('view', 'node/'. $nid));
        }
        else {
          // Node new
          form_set_error('reference', t('The node is not found in the repository.'));
        }
      }
    }
  }
}

/**
 * Implementation of hook_validate().
 */
function alfresco_validate($node, &$form) {

  drupal_add_js(drupal_get_path('module', 'alfresco') .'/alfresco.js');

  if (!empty($node->reference)) {
    if ($nid = alfresco_exists_node($node->reference, $node->nid)) {
      form_set_error('reference', t('This Alfresco node already exists in your Drupal site. [<a href="!url">View</a>]',
        array('!url' => url('node/'. $nid))));
    }
  }
}

// ------------------------------------------------------------------
// =3 Submit node functions
// ------------------------------------------------------------------

/**
 * Submit handler for node.
 */
function alfresco_form_submit($form, &$form_state) {

  if (isset($form_state['alf_node'])) {
    $alf_node = $form_state['alf_node'];

    $properties = alfresco_service_load_properties($alf_node);
    if ($properties) {
      foreach ($properties as $key => $value) {
        $form_state['values'][$key] = $value;
      }

      if (!empty($form_state['values']['use_title'])) {
        $title = truncate_utf8($properties['cm_title'], 255);
        $form_state['values']['title'] = $title;
      }
    }

    unset($form_state['alf_node']);
  }
}

// -----------------------------------------------------------------------
// =4 Database functions
// -----------------------------------------------------------------------

/**
 * Implementation of hook_insert().
 */
function alfresco_insert($node) {
  _alfresco_save($node);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function alfresco_update($node) {
  _alfresco_save($node);
}

/**
 * Save an alfresco node in database.
 */
function _alfresco_save($node) {

  // update timestamp
  $node->timestamp = time();

  // if this is a new node or we're adding a new revision
  if ($node->is_new || !empty($node->revision)) {
    drupal_write_record('alfresco_node', $node);
  }
  else {
    drupal_write_record('alfresco_node', $node, 'vid');
  }

  if (isset($node->cm_content)) {
    $content = $node->cm_content;
    $content['vid'] = $node->vid;
    $content['nid'] = $node->nid;

    drupal_write_record('alfresco_content', $content, 'vid');
    if (!db_affected_rows()) {
      drupal_write_record('alfresco_content', $content);
    }
  }
  else {
    db_query('DELETE FROM {alfresco_content} WHERE vid = %d', $node->vid);
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * When a node revision is deleted, we need to remove the corresponding record
 * from our table. The only way to handle revision deletion is by implementing
 * hook_nodeapi().
 */
function alfresco_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {

  switch ($op) {
    case 'delete revision':
      db_query('DELETE FROM {alfresco_node} WHERE vid = %d', $node->vid);
      db_query('DELETE FROM {alfresco_content} WHERE vid = %d', $node->vid);
      break;
  }
}

/**
 * Implementation of hook_delete().
 *
 * When a node is deleted, we need to remove all related records from out table.
 */
function alfresco_delete($node) {

  // Notice that we're matching all revision, by using the node's nid.
  db_query('DELETE FROM {alfresco_node} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {alfresco_content} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 *
 * Now that we've defined how to manage the node data in the database, we
 * need to tell Drupal how to get the node back out. This hook is called
 * every time a node is loaded, and allows us to do some loading of our own.
 */
function alfresco_load($node) {

  $fields = drupal_schema_fields_sql('alfresco_node');
  $fields = array_diff($fields, array('vid', 'nid'));
  $fields = implode(', ', $fields);

  $sql = "SELECT $fields FROM {alfresco_node} WHERE vid = %d";
  $alfresco_node = db_fetch_object(db_query($sql, $node->vid));

  $fields = drupal_schema_fields_sql('alfresco_content');
  $fields = array_diff($fields, array('vid', 'nid'));
  $fields = implode(', ', $fields);

  $sql = "SELECT $fields FROM {alfresco_content} WHERE vid = %d";
  $content_data = db_fetch_array(db_query($sql, $node->vid));
  if ($content_data) {
    $alfresco_node->is_file = TRUE;
    $alfresco_node->cm_content = $content_data;
  }

  return $alfresco_node;
}

// -----------------------------------------------------------------------
// =5 View functions
// -----------------------------------------------------------------------

/**
 * Implementation of hook_view().
 *
 * This is a typical implementation that simply runs the node text through
 * the output filters.
 */
function alfresco_view($node, $teaser = FALSE, $page = FALSE) {

  $node = node_prepare($node, $teaser);
  if ($teaser) {
    $node->content['alfresco_info'] = array(
      '#value'  => theme('alfresco_teaser', $node),
      '#weight' => 0,
    );
  }
  else {
    $node->content['alfresco_info'] = array(
      '#value'  => theme('alfresco_display', $node),
      '#weight' => -1,
    );
  }
  return $node;
}

/**
 * Implementation of hook_views_api().
 */
function alfresco_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'alfresco') .'/views',
  );
}

// ------------------------------------------------------------------
// =4 Cron hooks
// ------------------------------------------------------------------

/**
 * Implementation of hook_cron().
 *
 * @see ALFRESCO_SYNC_TIME
 * @see ALFRESCO_SYNC_LIMIT
 */
function alfresco_cron() {

  if (variable_get('alfresco_sync_enabled', FALSE)) {
    $limit = (int)variable_get('alfresco_sync_cron_limit', 100);
    $refresh = (int)variable_get('alfresco_sync_cron_refresh', 21600);

    $result = db_query_range('SELECT nid FROM {alfresco_node} WHERE timestamp < %d ORDER BY timestamp DESC', time() - $refresh, 0, $limit);
    while ($node = db_fetch_object($result)) {
      alfresco_sync_node($node);
    }
  }

  variable_set('alfresco_http_request_fails', FALSE);
}

// ------------------------------------------------------------------
// =5 Theme hooks
// ------------------------------------------------------------------

/**
 * Implementation of hook_theme()
 */
function alfresco_theme() {
  return array(
    'alfresco_properties_table' => array(
      'arguments' => array('form' => NULL),
      'file' => 'alfresco.admin.inc',
    ),
    'alfresco_teaser' => array(
      'arguments' => array('node' => NULL),
      'file' => 'alfresco.theme.inc',
    ),
    'alfresco_display' => array(
      'arguments' => array('node' => NULL),
      'file' => 'alfresco.theme.inc',
    ),
  );
}

// ------------------------------------------------------------------
// =6 Files helper functions
// ------------------------------------------------------------------

/**
 * Return The URL for download the alfresco file.
 */
function alfresco_url_download($node) {

  if ($node->type == 'alfresco_item' && !empty($node->cm_content)) {
    return 'node/'. $node->nid .'/download/'. $node->cm_name;
  }
}

/**
 * Transfer file using http to client. Pipes a file through Drupal to the client.
 *
 * @param $reference
 *  A string containing an Alfresco Node Reference.
 *
 * @param $disposition
 *  The Content-Disposition Header. Possible values: 'attachment' or 'inline'.
 *
 * @see file_transfer()
 * @see http://w-shadow.com/blog/2007/08/12/how-to-force-file-download-with-php/
 * @see http://www.phpclasses.org/browse/file/9051.html
 * @see http://www.php-mysql-tutorial.com/php-tutorial/php-read-remote-file.php
 * @see http://htmlblog.net/10-code-snippets-for-php-developers/
 * @see http://www.faqts.com/knowledge_base/view.phtml/aid/1/fid/40 - Which is faster, echo or print?
 */
function alfresco_file_transfer($reference, $disposition = NULL) {
  if (ob_get_level()) {
    ob_end_clean();
  }

  $alf_node = alfresco_service_load_node($reference);
  if (!$alf_node) {
    drupal_not_found();
    exit();
  }

  $alf_data = $alf_node->cm_content;
  if (!$alf_data) {
    drupal_not_found();
    exit();
  }

  $name = $alf_node->cm_name;
  $url  = $alf_data->url;
  $size = $alf_data->size;
  $mime = $alf_data->mimetype;

  drupal_set_header('Content-Type: '. $mime);
  drupal_set_header('Content-Length: '. $size);

  if ($disposition == 'attachment' || $disposition == 'inline') {
    drupal_set_header('Content-Disposition: '. $disposition .'; filename="' . $name . '"');
  }

  // Transfer file in 1024 byte chunks to save memory usage.
  if ($fd = fopen($url, 'rb')) {
    while (!feof($fd)) {
      echo fread($fd, 1024);
    }
    fclose($fd);
  }
  else {
    drupal_not_found();
  }
  exit();
}

// ------------------------------------------------------------------
// =7 Utils helper functions
// ------------------------------------------------------------------

/**
 * Verify the syntax of the given Alfresco Node Reference.
 *
 * @param $reference
 *   A string containing an Alfresco Node Reference.
 * @return
 *   TRUE if the reference is in a valid format.
 *
 * @see http://wiki.alfresco.com/wiki/Web_Service_Data_Types
 */
function alfresco_valid_reference($reference) {

  $pattern = "/^\w+:\/\/\w+\/". ALFRESCO_REGEX_NODE_UUID ."$/";
  return preg_match($pattern, $reference);
}

/**
 * @todo: Add documentation.
 */
function alfresco_valid_path($path) {

  $pattern = '/^(\/\w+:\w+)+$/';
  return preg_match($pattern, $path);
}

/**
 * Parse a given Alfresco Node Reference.
 *
 * @param $reference
 *   A string containing an Alfresco Node Reference.
 * @return
 *   FALSE, if the reference is in an invalid format. Otherwise, a
 *   keyed array containing the components:
 *    'reference' - Reference (same)
 *    'scheme'    - Scheme.
 *    'address'   - Address.
 *    'uuid'      - UUID.
 *   If the component parameter is specified a string is returned
 *   instead of an array.
 */
function alfresco_parse_reference($reference, $component = '') {

  $pattern = "/^(\w+):\/\/(\w+)\/(". ALFRESCO_REGEX_NODE_UUID .")$/";
  if (preg_match($pattern, $reference, $matches)) {
    $info = array();
    $info['reference'] = $matches[0];
    $info['scheme']    = $matches[1];
    $info['address']   = $matches[2];
    $info['uuid']      = $matches[3];
    if (!empty($component)) {
      return $info[$component];
    }
    return $info;
  }
  return FALSE;
}

/**
 * Checks whether the alfresco_item node specified by reference exists.
 *
 * @param $reference
 *   A string containing an Alfresco Node Reference.
 * @param $exclude
 *   An optional Node ID (nid) to be excluded.
 * @return
 *  Returns Node ID (nid) if the alfresco_item node specified by reference
 *  exists; FALSE otherwise.
 */
function alfresco_exists_node($reference, $exclude = NULL) {

  if (!empty($exclude)) {
    $sql = "SELECT nid FROM {alfresco_node} WHERE reference = '%s' AND nid <> %d";
    if ($nid = db_result(db_query($sql, $reference, $exclude))) {
      return $nid;
    }
  }
  else {
    $sql = "SELECT nid FROM {alfresco_node} WHERE reference = '%s'";
    if ($nid = db_result(db_query($sql, $reference))) {
      return $nid;
    }
  }
  return FALSE;
}

/**
 * Date conversion helper function (from date_api.module)
 * No timezone conversion is done in this operation.
 */
function alfresco_date_convert($date) {

  if (empty($date) && !$date === 0) {
    return NULL;
  }

  if (!preg_match(ALFRESCO_REGEX_DATE_LOOSE, $date, $regs)) {
    return NULL;
  }

  $date = array(
    'year'   => isset($regs[1]) ? intval($regs[1]) : '',
    'month'  => isset($regs[2]) ? intval($regs[2]) : '',
    'day'    => isset($regs[3]) ? intval($regs[3]) : '',
    'hour'   => isset($regs[5]) ? intval($regs[5]) : '',
    'minute' => isset($regs[6]) ? intval($regs[6]) : '',
    'second' => isset($regs[7]) ? intval($regs[7]) : '',
  );

  return sprintf("%04d-%02d-%02d %02d:%02d:%02d",
    $date['year'], $date['month'],  $date['day'],
    $date['hour'], $date['minute'], $date['second']);
}

/**
 * Parses a Soap Fault and returns an keyed array containing the components:
 *   'code'    - Error code
 *   'message' - Error message
 *   'detail'  - Exception server name
 *
 * @see http://eirikhoem.wordpress.com/2007/08/11/soapfault-vs-exceptions/
 */
function alfresco_parse_soap_fault(SoapFault $sf) {

  if (empty($sf)) {
    return NULL;
  }

  $code = '';
  $message = '';
  $detail = '';

  if (isset($sf->faultstring)) {
    $pos = strpos($sf->faultstring, ':');
    if ($pos) {
      $code = substr($sf->faultstring, 0, $pos);
      $message = trim(substr($sf->faultstring, $pos + 1, strlen($sf->faultstring)));
    }
    else {
      $message = $sf->faultstring;
    }
  }

  if (isset($sf->detail)) {
    $reflectionObject = new ReflectionObject($sf->detail);
    $properties = $reflectionObject->getProperties();
    $exceptionName = $properties[0]->name;
    $detail = $exceptionName;
  }

  return array('code' => $code, 'message' => $message, 'detail' => $detail);
}

/**
 * Synchronize the alfresco_item node with Alfresco Node.
 */
function alfresco_sync_node($node) {
  global $user;

  // check permissions
  if (!user_access('administer alfresco')) {
    return FALSE;
  }

  // check node content type
  if (!$node || $node->type != 'alfresco_item') {
    return FALSE;
  }

  // check alfresco node reference
  $reference = $node->reference;
  if (!alfresco_valid_reference($reference)) {
    return FALSE;
  }

  // check alfresco node in repository
  $alf_node = alfresco_service_load_node($reference);
  if (!$alf_node) {
    // @todo el nodo de Alfresco no existe, decidir que hacer.
    return FALSE;
  }

  // update properties
  $properties = alfresco_service_load_properties($alf_node);
  if (!$properties) {
    foreach ($properties as $key => $value) {
      $node->$key = $value;
    }

    // @todo mapping
    // $node->title = $properties->cm_title;
    // $node->body  = $properties->cm_description;
  }

  // save node
  node_save($node);

  return TRUE;
}

/**
 * Create an alfresco_item node from a reference.
 *
 * @param $reference
 *   String Alfresco Node Reference.
 * @param $title
 *   String to be used as the node's title. If this is ommitted the title of
 *   Alfresco item will be used.
 * @param $body
 *   String to be used as the node's body.
 * @param $options
 *   An associative array of additional options, with the following keys:
 *     - 'name'
 *       Authored by field. Leave blank to use the current user.
 *     - 'date'
 *       Authored on field. Leave blank to use the current time.
 *     - 'status'
 *       Published field.
 *     - 'promote'
 *       Promoted to front page field.
 *     - 'sticky'
 *       Sticky at top of lists field.
 *     - 'language'
 *       Language code if the locale.module is installed.
 *     - 'comment'
 *       Comment settings if the comment.module is installed.
 *     - 'taxonomy'
 *       Taxonomy terms to assign to the node if the taxonomy.module is
 *       installed.
 * @return
 *   A node object if the node is created successfully or FALSE on error.
 *
 * @see http://www.darrenmothersele.com/content/programmatically-creating-drupal-nodes
 * @see http://acquia.com/blog/migrating-drupal-way-part-i-creating-node
 * @see http://drupal.org/node/293663
 * @see http://drupal.org/node/178506#comment-895418
 * @see image_create_node_from()
 * @see drupal_execute()
 */
function alfresco_create_node($reference, $title = '', $body = '', $options = array()) {
  global $user;

  if (!user_access('create alfresco content')) {
    return FALSE;
  }

  // Ensure it's a valid alfresco node referente
  if (!alfresco_valid_reference($reference)) {
    return FALSE;
  }

  if (alfresco_exists_node($reference)) {
    return FALSE;
  }

  $alf_node = alfresco_service_load_node($reference);
  if (!$alf_node) {
    return FALSE;
  }

  // Build the alfresco_item node
  $node = new stdClass();
  $node->type  = 'alfresco_item';
  $node->name  = $user->name;
  $node->title = truncate_utf8($title, 255);
  $node->body  = $body;

  // Set the node's defaults
  module_load_include('inc', 'node', 'node.pages');
  node_object_prepare($node);

  // Node author information and options for administrators
  if (user_access('administer nodes')) {
    foreach (array('name', 'date', 'status', 'promote', 'sticky') as $key) {
      if (isset($options[$key])) {
        $node->$key = $options[$key];
      }
    }
  }

  // Locale settings
  if (module_exists('locale')) {
    if (isset($options['language'])) {
      $node->language = $options['language'];
    }
    else {
      global $language;
      $node->language = $language->language;
    }
  }

  // Taxonomy
  if (module_exists('taxonomy') && isset($options['taxonomy'])) {
    $node->taxonomy = $options['taxonomy'];
  }

  // Comment
  if (module_exists('comment') && isset($options['comment'])) {
    $node->comment = $options['comment'];
  }

  // Alfresco node stuff
  $node->reference = $reference;

  $properties = alfresco_service_load_properties($alf_node);
  if ($properties) {
    foreach ($properties as $key => $value) {
      $node->$key = $value;
    }
  }

  if (empty($title) && isset($node->cm_title)) {
    $node->title = truncate_utf8($node->cm_title, 255);
  }

  // Save the node.
  $node = node_submit($node);
  node_save($node);

  return $node;
}

/**
 * Implementation of hook_user().
 */
function alfresco_user($op, &$edit, &$account, $category = NULL) {

  switch ($op) {
    case 'login':
      // Cuando el usuario se autentica en Drupal guardamos las credenciales
      // para podernos autenticar contra Alfresco cuando sea necesario.
      // @todo: Analizar otros métodos, como guardar la sesión de alfresco
      $_SESSION['alfresco']['credentials']['username'] = $edit['name'];
      $_SESSION['alfresco']['credentials']['password'] = base64_encode($edit['pass']);
      break;

    case 'logout':
      unset($_SESSION['alfresco']);
      break;
  }
}

/**
 * Implementation of hook_elements().
 */
/*
function alfresco_elements() {
  $type['alfresco'] = array(
    '#input' => TRUE,
    '#default_value' => '',
    '#process' => array('alfresco_process'),
    //'#element_validate' => array('alfresco_element_validate'),
  );
  return $type;
}

function alfresco_process($element, $edit, $form_state, $complete_form) {

}
*/